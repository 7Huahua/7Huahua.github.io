<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 欢迎光临 恭喜发财</title>
    <link>https://7huahua.github.io/posts/</link>
    <description>Recent content in Posts on 欢迎光临 恭喜发财</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 05 Jan 2023 22:07:29 +0900</lastBuildDate><atom:link href="https://7huahua.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>组会日志2023上半年</title>
      <link>https://7huahua.github.io/2023/01/%E7%BB%84%E4%BC%9A%E6%97%A5%E5%BF%972023%E4%B8%8A%E5%8D%8A%E5%B9%B4/</link>
      <pubDate>Thu, 05 Jan 2023 22:07:29 +0900</pubDate>
      
      <guid>https://7huahua.github.io/2023/01/%E7%BB%84%E4%BC%9A%E6%97%A5%E5%BF%972023%E4%B8%8A%E5%8D%8A%E5%B9%B4/</guid>
      <description>2022.12.27 半衰期回归github源码
大概是说人类的记忆力是可以用半衰期回归预测的。用了多邻国的数据进行预测。
我在想人们对于一个地方的兴趣是否也具有半衰期？我对于某个地方的兴趣会逐渐减弱，去到的概率越来越小，但我有一定概率之后重燃对这个东西的兴趣。
2023.1.9~10</description>
    </item>
    
    <item>
      <title>Word2vec相关</title>
      <link>https://7huahua.github.io/2023/01/word2vec%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Thu, 05 Jan 2023 15:49:13 +0900</pubDate>
      
      <guid>https://7huahua.github.io/2023/01/word2vec%E7%9B%B8%E5%85%B3/</guid>
      <description>目前的实验需要word2vec进行embedding，这里记录下过程。
安装gensim 这里的坑是gensim的版本更新很快，第一次安装可以最新版。但使用老版本存储后的model不能用新版导入，而新版的语法和老版有可能不兼容。
pip install --upgrade gensim pip install gensim==4.0.0 导入并使用 from gensim.models import Word2Vec model = Word2Vec(sentences=cropus, vector_size=100, window=5, min_count=1, workers=4) model.save(&amp;quot;word2vec.model&amp;quot;) 获取cropus word2vec格式：list of lists
对于GPS时间序列来说： [ [p0,p1,p2], [p1,p2], &amp;hellip; [p10,p11,p12,p13] ]
训练及读取模型 model = Word2Vec(content,vector_size=250,window=5,min_count=0) model.save(&#39;./word2vec.model&#39;) model = Word2Vec.load(&#39;word2vec.model&#39;) 获取每个poi的embedding model.wv(str[poi_number]) 更改colab工作路径 os.chdir(path) </description>
    </item>
    
    <item>
      <title>Pandas和numpy</title>
      <link>https://7huahua.github.io/2023/01/pandas%E5%92%8Cnumpy/</link>
      <pubDate>Thu, 05 Jan 2023 15:01:37 +0900</pubDate>
      
      <guid>https://7huahua.github.io/2023/01/pandas%E5%92%8Cnumpy/</guid>
      <description>在做实验的过程中搜了不知道多少次numpy和pandas的一些操作，总是忘记。现在记录下来。
pandas: csv-&amp;gt;df,df-&amp;gt;csv pd.read_csv(&#39;./name.csv&#39;) df.to_csv(&#39;./name.csv&#39;,header = None, index = None) numpy: array-&amp;gt;csv numpy.savetxt(&#39;./name.csv&#39;,a = numpy.asarray([[1,2,3],[4,5,6]]),delimiter = &#39;,&#39;) pandas: string to datetime from datetime import datetime datetime_str = &#39;09/19/22 13:55:26&#39; datetime_object = datetime.strptime(datetime_str, &#39;%m/%d/%y %H:%M:%S&#39;) pandas:隔行相减 df[&#39;xx_1&#39;] = df[&#39;xx&#39;].shift(1) df[&#39;xx&#39;]-df[&#39;xx_1&#39;] pandas: groupby 相关 sort_values([&#39;col_name&#39;],ascending = False) reset_index(drop = True) set_index() pandas:选择某一列非NAN的行 selected_rows = df[~df[&#39;col_name&#39;].isnull()] pandas:表join 默认的join是根据index，如果不想根据index就要设定key #不保留index df.set_index(&#39;key&#39;).join(other.set_index(&#39;key&#39;)) #保留index df.join(other.set_index(&#39;key&#39;), on=&#39;key&#39;) pandas:绘制概率直方图 df.hist() pandas: 更改column name df.set_axis([&#39;col_name1&#39;,&#39;col_name2&#39;,&#39;col_name3&#39;], axis = 1) </description>
    </item>
    
    <item>
      <title>工作日志6 Nodejs和puppeteer学习</title>
      <link>https://7huahua.github.io/2023/01/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%976-nodejs%E5%92%8Cpuppeteer%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Thu, 05 Jan 2023 14:14:27 +0900</pubDate>
      
      <guid>https://7huahua.github.io/2023/01/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%976-nodejs%E5%92%8Cpuppeteer%E5%AD%A6%E4%B9%A0/</guid>
      <description>这个项目本身使用Aurora Vision提供的api进行爬虫，但Aurora Vision更新了他们的api版本，并且需要申请额外服务，因此该项目只能从网页基于puppeteer进行爬虫。
puppeteer是一个很容易上手的爬虫库，基本看quick start就能理解其是如何模拟人的一些操作来爬虫的。该项目的难点在于我不会java，也不会js，熟悉这些花费了很久的时间。
node.js和puppeteer安装 先装npm，后装puppeteer，挺简单的
node.js的调试 console.log(&#39;this is test&#39;) 控制台输出
node inspect xxx.js: 内置的检查器
cont, c: 继续执行 next, n: 下一步 step, s: 进入 out, o: 走出去 pause：暂停运行代码（如开发者工具中的暂停按钮） 参考node.js 官方文档
在vs中设置js的debug环境vs nodejs
youtube视频教程Getting started with Node.js debugging in VS Code
在vs中debug:在控制台输入noed xxx.js之后即可打开debug页面。 vs inline value: Open Settings Search for &amp;ldquo;debug&amp;rdquo; Navigate to Features &amp;gt; Debug Change the setting for Debug: Inline Values
另外还可以使用devtool等方法。我觉得还是vs最方便。
node.js的一些迷惑语法 module exports: 模块化。 很多时候一个文件会被包装成一整个模块，直接对其debug是不会有反映的。要在别的test文件中导入，再逐行debug。 例如 #.</description>
    </item>
    
    <item>
      <title>工作日志5 Ruby_on_rails学习</title>
      <link>https://7huahua.github.io/2023/01/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%975-ruby_on_rails%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Thu, 05 Jan 2023 14:13:51 +0900</pubDate>
      
      <guid>https://7huahua.github.io/2023/01/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%975-ruby_on_rails%E5%AD%A6%E4%B9%A0/</guid>
      <description>这个工作内容是更改检测系统的web端，增加一个更改某个特定表的功能。主要使用ruby on rails。
ruby on rails quick start 官方入门教程rais入门
总的来说，rails是一个web框架，最重要的三个模块是controller routes view
controller控制着view的生成。
view中使用的方法，以及view的名称，都应该在contoller中定义。
view也就是page，包含每个页面的html文件。view下每个page的路径即为其的URL导航。这些导航也可以在routes中更改。
总之搞不明白了就再把官方文档看一遍。
model rails中类似java和python的class即为model。model之间可以有属于、包含、一对多多对多的关系。
限定条件取得数据 参考这个连接（rbr写博客真的很详细）qiita rails 语法
where model.where(colname:&amp;lsquo;value&amp;rsquo;) model.where.not(colname:&amp;lsquo;value&amp;rsquo;) model.where(colname1:&amp;lsquo;value1&amp;rsquo;).or(colname2:&amp;lsquo;value2&amp;rsquo;)
first and last model.first(n) model.last(n)
select model.select(:colname) model.select(&amp;lsquo;colname&amp;rsquo;)
order model.order(&amp;rsquo;name ASC&amp;rsquo;) model.order(name::desc)
limit model.limit(n)
get all column names model.column_names
ruby 语法 num to str ‘ABC’ + 12.to_s get var value &amp;quot;@post_#{id}&amp;quot; eval:执行字符串代表的语句 a = nil eval(&#39;a = RUBY_RELEASE_DATE&#39;) p a #=&amp;gt; &amp;quot;2007-03-13&amp;quot; 迭代：each_with_index/each [5, 10, 15].</description>
    </item>
    
    <item>
      <title>Linux 指令学习</title>
      <link>https://7huahua.github.io/2022/11/linux-%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Wed, 02 Nov 2022 15:17:42 +0900</pubDate>
      
      <guid>https://7huahua.github.io/2022/11/linux-%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/</guid>
      <description>Linux 指令学习 最近实习终于派给我了可以学到东西的活，在sxp的鼓励下开始学习指令。再次谢谢她！
密钥登陆 ssh -i [privatekey] username@ip_address 使用ssh密钥登陆
密钥上传下载 scp -i [privatekey] -r username@ip_address:remote_dictionary ./local_dictionary/ 使用ssh复制文件夹到本地
scp -i [privatekey] username@ip_address:remote_dictionary/file ./local_dictionary/ 使用ssh复制文件到本地
交换后面两个参数则是上传
crontab 我理解的crontab是一种类似heroku scheduler的定时运行某条指令的文件。该文件包含cron(8)守护进程的指令。可以自定义时间，指令，用户。
例如：
2,7,12,17,22,27,32,37,42,47,52,57 5-19 * * * /home/solarkun/jishakanshi_sh/controlCompcs.sh MONITOR 1 表示每天5~19点的2分，7分，&amp;hellip;，57分，运行一遍后面的指令。
crontab的设置cron 配置指南
crontab指令 ： crontab -l
crontab -e
grep
source
sh文件
linux脚本类型。sh是linux中运行shell的命令，是shell的解释器。shell脚本是linux中shell与命令行界面，用户可以在shell脚本输入命令来执行各种各样的任务。
执行sh文件： ./xxx.sh
或：sh xxx.sh
sh文件有时会遇到权限问题。chmod命令可以更改权限。
chmod 744 filename 在这里，每个数字代表允许的权限的总和：
4赋予读取权限
2赋予写权限
1赋予执行权限
0没有权限
参考链接： chmod参数
$ 是什么 读项目sh源码总会碰到$美元符号搭配各种各样数字字母，初学者实在很难理解。总结如下。
$+var_name: 引用变量值
$?: Expands to the exit status of the most recently executed foreground pipeline.</description>
    </item>
    
    <item>
      <title>第一篇博客</title>
      <link>https://7huahua.github.io/2022/10/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 06 Oct 2022 16:03:01 +0900</pubDate>
      
      <guid>https://7huahua.github.io/2022/10/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>大学时期没有完成的博客计划终于在博士时期开始了 谁能想到目的是为了记录实验数据
我就是懒癌
以下是写博客要参考的内容
使用hugo搭建博客：渣渣的夏天-搭建个人博客
按照这个教程
问题1：报错无模板 Error: module &amp;#34;hugo-tranquilpeak-theme&amp;#34; not found; either add it as a Hugo Module or store it in &amp;#34;D:\\PycharmProjects\\HugoWebsite\\blog\\themes&amp;#34;.: module does not exist 需要把config.toml文件中的hugo-tranquilpeak-theme改为tranquilpeak
问题2：ssh报错 The authenticity of host &amp;#39;github.com (20.27.177.113)&amp;#39; can&amp;#39;t be established. 需要按照这里设定github私钥:hugo-build-blog
问题3：github大小写识别问题 git改为可识别大小写 git config --get core.ignorecase git config core.ignorecase false github用户名在setting-account里直接改为小写 问题4：branch导致push不显示 据说这是由于github默认分支从master 改为main的缘故。那我已经push到master了，需要重命名。 参考: rename master to main
Markdown教程：菜鸟教程Markdown
Hugo快速入门：quick start
搭建好之后新增加一篇博客 hugo new posts/xxx.md
编辑xxx.md内容
在blog文件夹下:hugo server -D, 进入local host：1313预览</description>
    </item>
    
  </channel>
</rss>
